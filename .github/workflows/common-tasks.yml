name: Common Tasks

on:
  workflow_call:
    inputs:
      run-sonarcloud:
        description: 'Whether to run SonarCloud analysis'
        required: false
        default: false
        type: boolean
      run-docker:
        description: 'Whether to build and push Docker image'
        required: false
        default: false
        type: boolean
      run-performance:
        description: 'Whether to run performance tests'
        required: false
        default: false
        type: boolean
      run-deploy:
        description: 'Whether to run deployment'
        required: false
        default: false
        type: boolean
      deploy-environment:
        description: 'Environment to deploy to (staging/production)'
        required: false
        default: ''
        type: string

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  # Main Build with All Quality Checks (Gradle handles everything)
  build-and-quality:
    name: Build and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # Run Gradle build which includes all quality checks
    - name: Run Gradle Build with Quality Checks
      run: ./gradlew build
      
    # Upload all reports generated by Gradle
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          build/reports/
          build/test-results/
        retention-days: 30

  # Security Scanning (External tools not part of Gradle)
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Gitleaks to scan git history
      
    # Snyk for Open Source Scanning
    - name: Snyk Scan
      uses: snyk/actions/gradle@master
      with:
        command: test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
    # Trivy FS Scan - Install and run Trivy
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
        trivy --version
        
    - name: Run Trivy FS Scan
      run: |
        trivy fs --format json --output trivy-fs-report.json .
        trivy fs --severity HIGH,CRITICAL --exit-code 1 .
        
    - name: Upload Trivy FS Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-fs-report
        path: trivy-fs-report.json
        retention-days: 30
        
    # Gitleaks - Install and run Gitleaks
    - name: Install Gitleaks
      run: |
        curl -sSfL https://raw.githubusercontent.com/zricethezav/gitleaks/master/install.sh | sh -s -- -b /usr/local/bin v8.18.0
        gitleaks version
        
    - name: Run Gitleaks Scan
      run: |
        gitleaks detect --source . --report-format json --report-path gitleaks-report.json --exit-code 0
        
    - name: Upload Gitleaks Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gitleaks-report
        path: gitleaks-report.json
        retention-days: 30
        
    # Check for secrets with TruffleHog (keeping existing)
    - name: Check for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: HEAD~1
        head: HEAD

  # SonarCloud Analysis (Conditional)
  sonarqube:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [build-and-quality]
    if: ${{ inputs.run-sonarcloud }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # SonarCloud Scan
    - name: SonarCloud Analysis
      run: ./gradlew sonarqube
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Docker Build and Push (Conditional)
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-quality]
    if: ${{ inputs.run-docker }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/github-actions-demo:latest
          ${{ secrets.DOCKER_USERNAME }}/github-actions-demo:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing (Conditional)
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-quality]
    if: ${{ inputs.run-performance }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # Run JMH benchmarks
    - name: Run JMH Benchmarks
      run: ./gradlew jmh
      continue-on-error: true
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: build/reports/jmh/
        retention-days: 30

  # Deployment (Conditional)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [docker, sonarqube]
    if: ${{ inputs.run-deploy && inputs.deploy-environment != '' }}
    environment: ${{ inputs.deploy-environment }}
    
    steps:
    - name: Deploy to ${{ inputs.deploy-environment }}
      run: echo "Deploying to ${{ inputs.deploy-environment }} environment..."
      # Add your deployment steps here

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, performance]
    if: always() && ${{ inputs.run-deploy || inputs.run-performance }}
    
    steps:
    - name: Notify on success
      if: success()
      run: echo "All checks passed successfully!"
      
    - name: Notify on failure
      if: failure()
      run: echo "Some checks failed. Please review the logs." 